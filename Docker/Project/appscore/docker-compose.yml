version: '3.9'
networks:
  mssql-net:
  rabbitmq-net:
  redis-net:
  web-net:
volumes:
  mssql-vol:
services:
  sql.data:
    container_name: sql.data
    build:
      context: Database
      dockerfile: Dockerfile
    volumes:
      - mssql-vol:/var/opt/mssql
    networks:
      - mssql-net
    restart: always    
  user.data:
    container_name: user.data
    image: redis
    ports:
      - 6379:6379
    networks:
      - redis-net
    restart: always
    depends_on:
      - sql.data
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - 15672:15672
      - 5672:5672
    networks:
      - rabbitmq-net
    healthcheck:
      test: ["CMD", "rabbitmq", "status"]
      interval: 10s
      timeout: 10s
      retries: 5
    depends_on:
      sql.data:
        condition: service_started
  applicant.api:
    container_name: service-applicants-api
    build:
      context: .
      dockerfile: Dockerfile.applicant
    #image: pierrelebris/applicant.api:latest
    ports:
      - 8081:80
    environment:
      - ConnectionString=Server=sql.data;User=sa;Password=Pass@word;Database=dotnetgigs.applicants;
      - HostRabbitmq=rabbitmq
    networks:
      - mssql-net
      - rabbitmq-net
      - web-net
    depends_on:
      rabbitmq:
        condition: service_healthy

  jobs.api:
    container_name: service-jobs-api
    build:
      context: .
      dockerfile: Dockerfile.jobs
    #image: pierrelebris/jobs.api:latest
    ports:
      - 8083:80
    environment:
      - ConnectionString=Server=sql.data;User=sa;Password=Pass@word;Database=dotnetgigs.jobs;
      - HostRabbitmq=rabbitmq
    networks:
      - mssql-net
      - rabbitmq-net
      - web-net
    depends_on:
      rabbitmq:
        condition: service_healthy
      sql.data:
        condition: service_started
  identity.api:
    container_name: service-identity-api
    build:
      context: .
      dockerfile: Dockerfile.identity
    #image: pierrelebris/identity.api:latest
    ports:
      - 8084:80
    environment:
      - RedisHost=user.data:6379
      - HostRabbitmq=rabbitmq
    networks:
      - rabbitmq-net
      - redis-net
      - web-net
    depends_on:
      rabbitmq:
        condition: service_healthy
      sql.data:
        condition: service_started

  web:
    container_name: web
    build:
      context: .
      dockerfile: Dockerfile.web
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - 80:80
    networks:
    - web-net
    depends_on:
      - sql.data
      - user.data
      - rabbitmq
      - applicant.api
      - identity.api
      - jobs.api
    restart: always